#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.0.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 30 #"(lib \"image-core.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 74 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 36 #"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 49 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 48 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1           0 2515 0 26 3 18 #"#lang typed/racket"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 12 #"racket/match"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 11 #"\"types.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 20 #"\"type-functions.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 20 #"\"relation-utils.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 22 #"\"helper-functions.rkt\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"all-defined-out"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"RelExpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 3 #"Rel"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"eval-relexpr"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 4 #"expr"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 5 #"Union"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"build-union"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 9 #"Intersect"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-intersect"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 10 #"Difference"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"build-difference"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 7 #"Product"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"build-product"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 4 #"Join"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-join"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 7 #"Project"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"build-projection"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Heading-attrs"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 8 #"Restrict"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 6 #"Rename"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"build-renamed-relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 10 #"Theta-Join"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"build-theta"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 6 #"Divide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 14 3 2 #"r3"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-divide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r3"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 8 #"Semijoin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"build-semijoin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 9 #"Semiminus"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-semiminus"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 6 #"Extend"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-extension"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 5 #"Image"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"build-image"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Rel-rel"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-relexpr"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 17 3 113
(
 #";((struct Summarize (r1 r2 a)) (Rel (build-summarize (Rel-rel (eval-"
 #"relexpr r1)) (Rel-rel (eval-relexpr r2)) a)))"
) 0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Rel"
0 0 4 3 1 #" "
0 0 14 3 9 #"empty_rel"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 180
(
 #"; These functions implement the relational algebra operations ------"
 #"--------------------------------------------------------------------"
 #"--------------------------------------------"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 180
(
 #"; Codd's original eight operators, plus rename ---------------------"
 #"--------------------------------------------------------------------"
 #"--------------------------------------------"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 65
#"; UNION: builds the union of 2 relations, removing any duplicates"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-union"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-union"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 56
#"\"Cannot use UNION on relations with different headings!\""
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"unique-tuples"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #"; INTERSECTION: builds the union of 2 relations, removing any duplic"
 #"ates"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-intersect"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-intersect"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 60
#"\"Cannot use INTERSECT on relations with different headings!\""
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"common-tuples"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#"; DIFFERENCE: subtracts the 2nd relation's tuples from the first"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 16 #"build-difference"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"build-difference"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 61
#"\"Cannot use DIFFERENCE on relations with different headings!\""
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"tuples-difference"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 54 #"; PRODUCT: builds the cartesian product of 2 relations"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 13 #"build-product"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 13 #"build-product"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"attribute-names-disjoint?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 67
(
 #"\"Cannot use PRODUCT on relations "
 #"with overlapping attribute names!\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"cartesian-heading"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"cartesian-tuples"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #"; JOIN: builds the join of 2 relations"
0 0 4 29 1 #"\n"
0 0 17 3 135
(
 #"; if r1 and 2 r2 have no attributes in common, the cartesian product"
 #" is formed; if all attributes are the same, the intersection is for"
) 0 0 17 11 44 #"med; otherwise, r1 and r2 are joined on all "
0 0 17 3 18 #"common attributes."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 10 #"build-join"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"build-join"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"h2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 25 #"attribute-names-disjoint?"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"build-product"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"(("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-intersect"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"common-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"joined-heading"
0 0 4 3 1 #" "
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"joined-tuples"
0 0 4 3 1 #" "
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 165
(
 #"; THETA-JOIN: joins two relations on a non-equality operator (though"
 #" it would also work with equality). The attributes used in the join "
 #"need to have different names."
) 0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #"; Theta-join is implemented as a restriction (on the given predicate"
 #") following a cartesian product."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-theta"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"Predicate"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-theta"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"attribute-names-disjoint?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 86
(
 #"\"Cannot make theta-join on relations with overlapping attribute nam"
 #"es - rename first!\""
) 0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"build-product"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #"; RESTRICT: returns a filtered relation, keeping just those tuples t"
 #"hat satisfy the given predicate."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 9 #"Predicate"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 17 #"build-restriction"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"given-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 2 #"Is"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 4 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 17 #"get-comp-function"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-operand"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 5 #"rand1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"eval-operand"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 5 #"rand2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"p"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"match"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 2 #"Is"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 3 #"att"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"Is"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"negate"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"att"
0 0 4 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"p3"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 2 #"p3"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 3 #"And"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"p1"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"Or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 34 #"                                  "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 2 #"Or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"p1"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"And"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"Not"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 3 #"And"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"p1"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-intersect"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"(("
0 0 14 3 6 #"struct"
0 0 4 3 1 #" "
0 0 14 3 2 #"Or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"p1"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"build-union"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 2 #"p1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"build-restriction"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 2 #"p2"
0 0 22 3 8 #"))))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 136
(
 #"; DIVIDE: returns a new relation, keeping only those tuples from r1 "
 #"for which every combination with a tuple from r2 is contained in r3."
) 0 0 4 29 1 #"\n"
0 0 17 3 25 #"; = Date's \"small divide\""
0 0 4 29 1 #"\n"
0 0 17 3 179
(
 #"; originally intended by Codd as an algebraic counterpart of the ALL"
 #" operator of relational calculus - answers questions like \"get all "
 #"suppliers (r1) wh supply all (r3) parts (r2)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 12 #"build-divide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 12 #"build-divide"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"dividend"
0 0 4 3 1 #" "
0 0 14 3 7 #"divisor"
0 0 4 3 1 #" "
0 0 14 3 3 #"per"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 15 #"dividend-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 8 #"dividend"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 14 #"divisor-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 7 #"divisor"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 10 #"per-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 3 #"per"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 15 #"quotient-tuples"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"andmap"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"z"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"contains?"
0 0 4 3 1 #" "
0 0 14 3 10 #"per-tuples"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 4 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 28 #"append-every-tuple-from-list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 14 #"divisor-tuples"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 14 3 15 #"dividend-tuples"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 8 #"dividend"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 14 3 15 #"quotient-tuples"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #"; RENAME: returns a new relation with attributes renamed as specifie"
 #"d in the given list of attributes & new names."
) 0 0 4 29 1 #"\n"
0 0 17 3 57 #"; Note: the passed-in relation's heading is not modified."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 22 #"build-renamed-relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Pair"
0 0 4 3 1 #" "
0 0 14 3 9 #"Attribute"
0 0 4 3 1 #" "
0 0 14 3 6 #"String"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 22 #"build-renamed-relation"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 9 #"renamings"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"new-r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"new-relation-from"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"replace-attnames"
0 0 4 3 1 #" "
0 0 14 3 9 #"renamings"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Heading-attrs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 5 #"new-r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 19 #"replace-triplenames"
0 0 4 3 1 #" "
0 0 14 3 9 #"renamings"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 5 #"new-r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 14 3 5 #"new-r"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 70
(
 #"; PROJECT: projects the given relation on the given set of attribute"
 #"s."
) 0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #"; Removes any duplicates that might have come into existence through"
 #" this operation."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 16 #"build-projection"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 14 3 9 #"Attribute"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 16 #"build-projection"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 4 #"atts"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Heading"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 9 #"Attribute"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"contains?"
0 0 4 3 1 #" "
0 0 14 3 4 #"atts"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Heading-attrs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"remove-duplicates"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Tuple"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 6 #"Triple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"contains?"
0 0 4 3 1 #" "
0 0 14 3 4 #"atts"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 18 #"triple-attribute=?"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Tuple-triples"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 4 11 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 180
(
 #"; Additional operators as of C. J. Date  ---------------------------"
 #"--------------------------------------------------------------------"
 #"--------------------------------------------"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 183
(
 #"; SEMIJOIN: builds a new relation from r1, retaining only those tupl"
 #"es for which a matching tuple (= a tuple containing the same values "
 #"in attributes common to both relations) exists."
) 0 0 4 29 1 #"\n"
0 0 17 3 98
(
 #"; Current implementation is a projection following a join - this wil"
 #"l reuse any join optimization."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 14 #"build-semijoin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 14 #"build-semijoin"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"h2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 25 #"attribute-names-disjoint?"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"build-product"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 2 #"(("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"build-intersect"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"common-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 16 #"build-projection"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"joined-heading"
0 0 4 3 1 #" "
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"h1"
0 0 4 3 1 #" "
0 0 14 3 2 #"h2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"joined-tuples"
0 0 4 3 1 #" "
0 0 14 3 18 #"joining-attributes"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Heading-attrs"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 120
(
 #"; SEMIMINUS: builds a new relation from r1, retaining only those tup"
 #"les for which a matching tuple does not exist in r2."
) 0 0 4 29 1 #"\n"
0 0 17 3 64
#"; Current implementation is a semijoin followed by a difference."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-semiminus"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-semiminus"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 16 #"build-difference"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"build-semijoin"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 122
(
 #"; EXTEND: extends a relation, adding new attributes by applying the "
 #"operations specified in the \"extension list\" attribute"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-extension"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 7 #"Extlist"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-extension"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 8 #"r-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"lambda:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"append-new-triples"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 8 #"r-tuples"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"extended-heading"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 11 183
(
 #"; IMAGE: for one tuple from a relation r1, returns in a relation all"
 #" tuples from the given relation r2 that match the tuple on the joini"
 #"ng attributes, projected on all the non-common "
) 0 0 17 3 11 #"attributes."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-image"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Tuple"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 11 #"build-image"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"let:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"h"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 7 #"Heading"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"Heading"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"attlistfromtuple"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 16 #"build-projection"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"build-semijoin"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"attributes-difference"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"Relation-heading"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"h"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         337 4           0 0           0 55 0 14 3 6 #"extend"
0 0 2 3 1 #" "
0 0 14 3 1 #"s"
0 0 2 3 1 #" "
0 0 14 3 3 #"add"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sum"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"!!sp"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"qty"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 2 #"as"
0 0 2 3 1 #" "
0 0 14 3 4 #"totq"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"max"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"!!sp"
0 0 26 3 1 #","
0 0 2 3 1 #" "
0 0 14 3 3 #"qty"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 2 #"as"
0 0 2 3 1 #" "
0 0 14 3 4 #"maxq"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 14 3 1 #"s"
0 0 2 3 1 #" "
0 0 14 3 5 #"where"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"!!sp"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"pno"
0 0 22 3 1 #"}"
0 0 2 3 1 #" "
0 0 14 3 1 #"="
0 0 2 3 1 #" "
0 0 14 3 1 #"p"
0 0 2 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 3 #"pno"
0 0 22 3 1 #"}"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 11 182
(
 #"; SUMMARIZE: summarizes r1 as per the distinct value combinations (o"
 #"r values, if r2 has one attribute only) of r2. I.e. for every tuple "
 #"of r2 (duplicates are not allowed), a summary "
) 0 0 17 3 143
(
 #"of certain attributes in r1 is computed. The relation returned conta"
 #"ins all attributes of r2, plus the newly requested summarizing attri"
 #"butes. "
) 0 0 4 29 1 #"\n"
0 0 17 3 66
#"; When r2 is empty, the summaries are computed over r1 as a whole."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-summarize"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 14 3 7 #"Agglist"
0 0 4 3 1 #" "
0 0 14 3 2 #"->"
0 0 4 3 1 #" "
0 0 14 3 8 #"Relation"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 15 #"build-summarize"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 14 3 5 #"alist"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 8 #"Relation"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"extended-heading"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 14 3 5 #"alist"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"Body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 14 3 9 #"empty_rel"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"Tuple"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"calculate-summary-triples"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 11 #"empty_tuple"
0 0 4 3 1 #" "
0 0 14 3 5 #"alist"
0 0 22 3 1 #")"
0 0 22 3 1 #")"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 14 3 9 #"for/list:"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 2 #"(("
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 14 3 5 #"Tuple"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"Body-tuples"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Relation-body"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 3 #")))"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 4 #"let:"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 15 #"summary-triples"
0 0 4 3 1 #" "
0 0 14 3 1 #":"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"Listof"
0 0 4 3 1 #" "
0 0 14 3 6 #"Triple"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"calculate-summary-triples"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 5 #"alist"
0 0 22 3 2 #"))"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 1 #"("
0 0 14 3 5 #"Tuple"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"Tuple-triples"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 15 #"summary-triples"
0 0 22 3 7 #")))))))"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0           0
